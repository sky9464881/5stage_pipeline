// EX_stage.v
// EX 단계: ID_EX 레지스터에서 전달받은 신호를 기반으로 ALU 연산을 수행하고,
// 결과로 누산기 업데이트 및 (필요한 경우) 레지스터 파일/데이터 메모리 쓰기를 제어합니다.
`timescale 1ns / 1ps
module EX_stage(
    input  wire clk,
    input  wire rst,
    input  wire [2:0] in_opcode,     // ID_EX로부터 전달받은 opcode
    input  wire [4:0] in_dest,       // 목적 레지스터 번호 (write-back 대상)
    input  wire [7:0] in_imm,        // 즉치값 (주소 등)
    input  wire [7:0] in_reg_val,    // ID_stage에서 읽은 범용 레지스터 값
    input  wire [7:0] in_acc_val,    // 현재 누산기(accum) 값
    input  wire       in_reg_write,  // 레지스터 파일 쓰기 여부 (ID_stage 결정)
    input  wire       in_mem_write,  // 메모리 쓰기 여부 (ID_stage 결정)
    output reg  [7:0] alu_result,    // ALU 연산 결과 (누산기 업데이트용)
    output reg        out_reg_write, // EX 단계에서 실제로 레지스터 파일에 쓰기할지 제어
    output reg        out_mem_write, // 메모리 쓰기 제어
    output reg  [4:0] out_dest,      // 레지스터 파일 write-back 대상 주소
    output reg  [7:0] out_mem_data,  // 데이터 메모리에 쓸 데이터
    output reg        halt           // HLT 명령 시 1로 설정하여 CPU 정지
);
    // ALU 연산: in_acc_val(누산기)와 in_reg_val(레지스터 값)을 조합하여 연산 수행
    reg [7:0] alu_in;
    always @* begin
        case (in_opcode)
            3'b000: alu_result = in_acc_val;            // NOP: 누산기 유지
            3'b111: alu_result = in_acc_val;            // HLT: 누산기 유지
            3'b001: alu_result = in_reg_val;            // LDO: 외부에서 읽은 ROM 데이터가 in_reg_val에 있다고 가정
            3'b010: alu_result = in_reg_val;            // LDA: 외부에서 읽은 RAM 데이터가 in_reg_val에 있다고 가정
            3'b011: alu_result = in_acc_val;            // STO: 저장 동작 시 누산기 변화 없음
            3'b100: alu_result = in_reg_val;            // PRE: 누산기 <= 레지스터 값
            3'b101: alu_result = in_acc_val + in_reg_val; // ADD: 누산기 + 레지스터 값
            3'b110: alu_result = in_acc_val;            // LDM: 누산기 값을 그대로 전달 (write-back 시 reg_file에 쓰임)
            default: alu_result = 8'd0;
        endcase
    end
    
    // EX 단계 순차 논리: ALU 연산 결과를 바탕으로 write-back 및 메모리 쓰기를 제어합니다.
    always @(posedge clk or negedge rst) begin
        if (!rst) begin
            out_reg_write <= 1'b0;
            out_mem_write <= 1'b0;
            out_dest      <= 5'd0;
            out_mem_data  <= 8'd0;
            halt          <= 1'b0;
        end else begin
            // LDO, LDA, LDM 등은 레지스터 파일에 쓰기 수행
            if (in_opcode == 3'b001 || in_opcode == 3'b010 || in_opcode == 3'b110)
                out_reg_write <= 1'b1;
            else
                out_reg_write <= 1'b0;
                
            // STO 명령: 메모리 쓰기 수행
            if (in_opcode == 3'b011) begin
                out_mem_write <= 1'b1;
                out_mem_data  <= in_reg_val; // 저장할 데이터: ID_stage에서 읽은 reg_data
            end else begin
                out_mem_write <= 1'b0;
                out_mem_data  <= 8'd0;
            end
            
            out_dest <= in_dest;  // 목적 레지스터 주소 그대로 전달
            
            // HLT 명령 시 halt 신호 설정
            if (in_opcode == 3'b111)
                halt <= 1'b1;
            else
                halt <= 1'b0;
        end
    end
endmodule
