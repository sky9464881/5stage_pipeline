`timescale 1ns / 1ps
module MEM_WB_reg(
    input wire clk,
    input wire rst,
    input wire [7:0] in_value,
    input wire [4:0] in_dest,
    input wire in_reg_write,
    input wire in_mem_write,
    input wire [7:0] in_mem_addr,
    input wire [7:0] in_mem_data,
    output reg [7:0] out_value,
    output reg [4:0] out_dest,
    output reg out_reg_write,
    output reg out_mem_write,
    output reg [7:0] out_mem_addr,
    output reg [7:0] out_mem_data
);
    always @(posedge clk or negedge rst) begin
        if (!rst) begin
            out_value     <= 8'd0;
            out_dest      <= 5'd0;
            out_reg_write <= 1'b0;
            out_mem_write <= 1'b0;
            out_mem_addr  <= 8'd0;
            out_mem_data  <= 8'd0;
        end else begin
            out_value     <= in_value;
            out_dest      <= in_dest;
            out_reg_write <= in_reg_write;
            out_mem_write <= in_mem_write;
            out_mem_addr  <= in_mem_addr;
            out_mem_data  <= in_mem_data;
        end
    end
endmodule
