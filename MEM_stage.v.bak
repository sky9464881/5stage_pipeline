`timescale 1ns / 1ps
module MEM_stage(
    input wire clk,
    input wire rst,
    input wire [7:0] alu_result,     // EX 결과 (연산 결과 or 주소)
    input wire [7:0] mem_data,       // STO 시 저장할 데이터
    input wire [7:0] imm,            // 주소용
    input wire reg_write,
    input wire mem_write,
    output reg [7:0] out_value,      // 다음 단계에 전달할 실제 값 (ROM/RAM or ALU)
    output reg [4:0] out_dest,
    output reg out_reg_write,
    output reg out_mem_write,
    output reg [7:0] out_mem_addr,
    output reg [7:0] out_mem_data
);

    wire [7:0] ram_out, rom_out;

    // RAM 인스턴스
    ram ram_inst (
        .clk(clk),
        .rst(rst),
        .ex_out_mem_write(1'b0), // MEM에서는 읽기만
        .ena(1'b1),
        .ex_imm(imm),
        .ex_out_mem_data(8'd0),
        .data_mem(ram_out)
    );

    // ROM 인스턴스
    rom rom_inst (
        .data(rom_out),
        .addr(imm),
        .read(1'b1),
        .ena(1'b1)
    );

    always @(*) begin
        out_value      = alu_result; // 기본값: 그냥 ALU 값 전달
        out_dest       = 5'd0;
        out_reg_write  = reg_write;
        out_mem_write  = mem_write;
        out_mem_addr   = imm;
        out_mem_data   = mem_data;

        if (mem_write) begin
            // STO: 쓰기 예정, 값은 그대로 전달
            out_value = alu_result;
        end else if (reg_write) begin
            // LDA 또는 LDO
            out_value = (alu_result == ram_out) ? ram_out : rom_out;
        end
    end
endmodule
