// cpu_pipeline.v
// 상위 모듈: 각 파이프라인 단계 모듈(IF_stage, IF_ID_reg, ID_stage, ID_EX_reg, EX_stage)을 인스턴스화하고,
// 범용 레지스터 파일(reg_file), 데이터 메모리(data_mem), 누산기(accum) 등을 관리합니다.
`timescale 1ns / 1ps
module cpu_pipeline(
    input wire clk,
    input wire rst
);
    // ---------------------------
    // IF_stage와 IF_ID_reg 사이 연결 신호
    // ---------------------------
    wire [2:0] if_opcode;
    wire [4:0] if_ad1;
    wire [7:0] if_imm;
    wire       if_valid;
    
    // IF 단계 스톨 신호 (해저드 처리 필요 시 top 모듈에서 생성 가능)
    // 여기서는 기본적으로 스톨 없이 동작하도록 0 할당
    wire if_stage_stall = 1'b0;
    
    // HLT 신호는 EX_stage에서 생성되며, 추후 IF_stage에 피드백할 수 있음
    // 여기서는 단순히 상위 모듈 내에서 레지스터 파일 및 PC 업데이트 제어에 사용합니다.
    wire halt_signal;
    
    // IF_stage 인스턴스
    IF_stage if_stage_inst (
        .clk(clk),
        .rst(rst),
        .stall(if_stage_stall),
        .halt(1'b0),       // 초기에는 halt 없음 (EX_stage에서 생성 후 반영 가능)
        .out_opcode(if_opcode),
        .out_ad1(if_ad1),
        .out_imm(if_imm),
        .out_valid(if_valid)
    );
    
    // ---------------------------
    // IF -> ID 파이프라인 레지스터
    // ---------------------------
    wire [2:0] id_opcode;
    wire [4:0] id_ad1;
    wire [7:0] id_imm;
    wire       id_valid;
    
    IF_ID_reg if_id_reg_inst (
        .clk(clk),
        .rst(rst),
        .stall(if_stage_stall),
        .in_valid(if_valid),
        .in_opcode(if_opcode),
        .in_ad1(if_ad1),
        .in_imm(if_imm),
        .out_opcode(id_opcode),
        .out_ad1(id_ad1),
        .out_imm(id_imm),
        .out_valid(id_valid)
    );
    
    // ---------------------------
    // 범용 레지스터 파일 (32 x 8비트) 및 누산기
    // ---------------------------
    reg [7:0] reg_file [0:31];
    reg [7:0] accum;
    integer j;
    
    // reg_file는 동시 읽기/쓰기 가능한 구조로 사용되며,
    // ID_stage에서는 in_ad1 주소로 읽은 값을 전달받습니다.
    wire [7:0] reg_data;
    assign reg_data = reg_file[id_ad1];  // ID_stage 읽기 포트
    // 누산기는 단순한 8비트 레지스터 'accum'
    
    // ---------------------------
    // ID_stage: 명령어 해독 및 오퍼랜드 준비
    // ---------------------------
    // ID_stage는 IF_ID 레지스터의 값을 받아 레지스터 파일 읽기 결과와 누산기 값을 참조하여 제어 신호 생성
    wire [2:0] id_ex_opcode;
    wire [4:0] id_ex_dest;
    wire [7:0] id_ex_imm;
    wire [7:0] id_ex_reg_val;
    wire [7:0] id_ex_acc_val;
    wire       id_ex_reg_write;
    wire       id_ex_mem_write;
    
    ID_stage id_stage_inst (
        .clk(clk),
        .rst(rst),
        .in_opcode(id_opcode),
        .in_ad1(id_ad1),
        .in_imm(id_imm),
        .reg_data(reg_data),
        .acc_value(accum),
        .out_opcode(id_ex_opcode),
        .out_dest(id_ex_dest),
        .out_imm(id_ex_imm),
        .out_reg_val(id_ex_reg_val),
        .out_acc_val(id_ex_acc_val),
        .out_reg_write(id_ex_reg_write),
        .out_mem_write(id_ex_mem_write)
    );
    
    // ---------------------------
    // ID -> EX 파이프라인 레지스터
    // ---------------------------
    wire [2:0] ex_opcode;
    wire [4:0] ex_dest;
    wire [7:0] ex_imm;
    wire [7:0] ex_reg_val;
    wire [7:0] ex_acc_val;
    wire       ex_reg_write;
    wire       ex_mem_write;
    
    ID_EX_reg id_ex_reg_inst (
        .clk(clk),
        .rst(rst),
        .in_opcode(id_ex_opcode),
        .in_dest(id_ex_dest),
        .in_imm(id_ex_imm),
        .in_reg_val(id_ex_reg_val),
        .in_acc_val(id_ex_acc_val),
        .in_reg_write(id_ex_reg_write),
        .in_mem_write(id_ex_mem_write),
        .out_opcode(ex_opcode),
        .out_dest(ex_dest),
        .out_imm(ex_imm),
        .out_reg_val(ex_reg_val),
        .out_acc_val(ex_acc_val),
        .out_reg_write(ex_reg_write),
        .out_mem_write(ex_mem_write)
    );
    
    // ---------------------------
    // EX_stage: 연산 및 쓰기 제어
    // ---------------------------
    wire [7:0] alu_result;
    wire ex_out_reg_write;
    wire ex_out_mem_write;
    wire [4:0] ex_out_dest;
    wire [7:0] ex_out_mem_data;
    wire       ex_halt;
    
    EX_stage ex_stage_inst (
        .clk(clk),
        .rst(rst),
        .in_opcode(ex_opcode),
        .in_dest(ex_dest),
        .in_imm(ex_imm),
        .in_reg_val(ex_reg_val),
        .in_acc_val(ex_acc_val),
        .in_reg_write(ex_reg_write),
        .in_mem_write(ex_mem_write),
        .alu_result(alu_result),
        .out_reg_write(ex_out_reg_write),
        .out_mem_write(ex_out_mem_write),
        .out_dest(ex_out_dest),
        .out_mem_data(ex_out_mem_data),
        .halt(ex_halt)
    );
    
    // ---------------------------
    // Write-back: 레지스터 파일 및 누산기 업데이트
    // ---------------------------
    always @(posedge clk or negedge rst) begin
        if (!rst) begin
            accum <= 8'd0;
            for(j = 0; j < 32; j = j + 1)
                reg_file[j] <= 8'd0;
        end else begin
            // EX_stage에서 레지스터 파일 쓰기 신호가 활성화되면 해당 주소에 ALU 결과 기록
            if (ex_out_reg_write)
                reg_file[ex_out_dest] <= alu_result;
            // 누산기는 항상 EX_stage의 ALU 결과로 갱신
            accum <= alu_result;
        end
    end
    
    // ---------------------------
    // 데이터 메모리 (RAM) 업데이트 (STO 명령 처리)
    // ---------------------------
    reg [7:0] data_mem [0:255];
    integer k;
    always @(posedge clk or negedge rst) begin
        if (!rst) begin
            for(k = 0; k < 256; k = k + 1)
                data_mem[k] <= 8'd0;
        end else begin
            if (ex_out_mem_write)
                data_mem[ex_imm] <= ex_out_mem_data;
        end
    end
    
    // halt 신호가 발생하면 파이프라인 동작을 정지시킬 수 있음.
    // (여기서는 ex_halt 신호를 출력으로 받아 후속 처리 가능)
    
endmodule
