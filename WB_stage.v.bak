`timescale 1ns / 1ps
module WB_stage(
    input wire clk,
    input wire rst,
    input wire [7:0] value,
    input wire [4:0] dest,
    input wire reg_write,
    input wire mem_write,
    input wire [7:0] mem_addr,
    input wire [7:0] mem_data,
    output reg [7:0] reg_out_value,
    output reg [4:0] reg_out_dest,
    output reg reg_out_we,
    output reg [7:0] accum_out,

    // RAM 인터페이스
    output reg ram_we,
    output reg [7:0] ram_addr,
    output reg [7:0] ram_data
);
    always @(posedge clk or negedge rst) begin
        if (!rst) begin
            reg_out_value <= 8'd0;
            reg_out_dest  <= 5'd0;
            reg_out_we    <= 1'b0;
            accum_out     <= 8'd0;
            ram_we        <= 1'b0;
            ram_addr      <= 8'd0;
            ram_data      <= 8'd0;
        end else begin
            // 레지스터 쓰기
            reg_out_value <= value;
            reg_out_dest  <= dest;
            reg_out_we    <= reg_write;

            // 누산기 항상 갱신
            accum_out <= value;

            // 메모리 쓰기(STO)
            ram_we   <= mem_write;
            ram_addr <= mem_addr;
            ram_data <= mem_data;
        end
    end
endmodule
